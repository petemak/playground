(ns playground.core
  (:require [hiccup.core :as h]
            [clojure.string :as str]
            [clojure.java.io :as io]
            [clojure.data.csv :as csv]
            [clojure.data.json :as json]
            [clojure.core.async :as async :refer [>! >!! <!!
                                                  chan put! take!]]
            [incanter.core :as icore]
            [incanter.stats :as istats]
            [incanter.charts :as icharts]))

;; 2. Idomatic simplicity
;;
(defn pythagorean-triples [n]
  "A Pythagorean triple consists of three positive integers 
   a, b, and c, such that a² + b² = c²."
  (for [x (range 1 (inc n))
        y (range x (inc n))
        z (range y (inc n))
        :when (= (+ (* x x) (* y y)) (* z z))]
    [x y z])) 

;; Datomic schema
(def movie-schema [{:db/ident :movie/title
                    :db/valueType :db.type/string
                    :db/cardinality :db.cardinality/one
                    :db/doc "The title of the movie"}

                    {:db/ident :movie/genre
                     :db/valueType :db.type/string
                     :db/cardinality :db.cardinality/one
                     :db/doc "The genre of the movie"}

                    {:db/ident :movie/release-year
                     :db/valueType :db.type/long
                     :db/cardinality :db.cardinality/one
                     :db/doc "The year the movie was released in theaters"}])

;; Hiccup
(defn main-page
  [title sub-title stories]
  [:html
   [:head
    [:title title]]
   [:body
    [:h1 title]
    [:h3 sub-title]
    [:hr]
    (for [story stories]
      [:div 
       [:a {:href (:url story)}
        [:h4 (:name story)]]
       [:p (:description story)]])]])


;; GEnerate html for projecys
(defn stories
  "generate HTML for the specified stories"
  []
  (h/html (main-page "Project"
                     "Stories"
                     [{:name "Do this"
                       :url "/story/100"
                       :description "Create a this"}
                      {:name "Do that"
                       :url "/story/101"
                       :description "Create a that"}])))

(def vl ["Vivi" 7 :student ["Flyboat" 55]])

(def vm {:first-name "Vivi"
         :last-name "Makumbi"
         :age 7
         :address {:street "Flyboat House 55"
                   :street2 "Navigation Walk"
                   :city "Leeds"
                   :code "LS10 1JJ"
                   :country "United Kingdom"}})

(first vl)
(rest vl)
(cons :test vl)
(vl 1)

(conj vl :test)
(first vm)
(rest vm)
(merge-with + {:a 1 :b 2} {:a 6 :b 8 :c 4} )


(def lst [7 :igglepiggle ["vivs" 3/4]])

(def mp {:a 1 :b 2 :c {:name "Igglepiggle"}})

(update-in mp [:c :name] str/upper-case)


(rest [1 2 3])

(cons 0 [1 2 3])

(take 2 [1 2 3])

(drop 2 [1 2 3])

(drop 2 {:a 1 :b 2 :c 3})

(every? even? [1 2 3 4])

(not-every? odd? [1 3 5 7 8])

(not-any? nil? [1 2 3])

(some nil? [1 2 (:a {:b 3})])



(set! *print-length* 10)

(iterate inc 0)

(cycle [1 2 3])

(repeat 1)


(range 10)

(map inc (range 10))

(filter even? (range 10))

(reduce + (range 10))


(->> (range 10)
     (map #(+ 1 (* 3 %)))
     (filter even?)
     (reduce +))

(defn roll-die
  [n]
  (-> (rand-int n)
      inc))

(defn fib
  []
  (iterate (fn [[a b]]
             [b (+ a b)]) [0 1]))

(defn actors
  []
  (->> "https://developer.rottentomatoes.com/docs/read/json/v10/Box_Office_Movies"
       slurp))

(def fib2
  (map first
       (iterate (fn [[a b]]
                  [b (+ a b)])
                [0 1])))


(defn ms
  [s]
  (str/split s #"[\s : ?]+"))


(defn ten-jokes
  [] 
  (->>  "https://official-joke-api.appspot.com/jokes/ten"
        slurp
        json/read-json
        (map #(select-keys % [:setup :punchline]))
        (map #(str (:setup %) " => " (:punchline %)))
        flatten
        ms
        frequencies
        (sort-by (comp -  second))))


(defn tokenize
  [s]
  (str/split s #"[\s ? - , : ;]+"))

(defn jokes
  []
  (->>  "https://official-joke-api.appspot.com/jokes/ten"
        slurp
        json/read-json
        (map #(select-keys % [:setup :punchline]))
        (map #(str (:setup %) "-" (:punchline %)))
        (str/join " ")
        tokenize
        frequencies
        (sort-by (comp - val))))


(defn histo
  []
  (let [xs (->> (repeatedly #(rand 11))
                (partition 10)
                (map istats/mean)
                (take 10000))]
    (-> (icharts/histogram xs
                           :x-label "Mean"
                           :nbins 40)
        (icore/view))))

;; reducers

(defn map-inc-reducer
  "Uses the reducing inc function to create a function
   for use with high order function  map"
  [result input]
  (conj result (inc input)))


;; Using the map-inc-reducer function
(reduce map-inc-reducer [] (range 10))


;; We could also write a generic map function
;; that allows to specify the reducing function
(defn map-fn
  "retruns a reducing fucntion which applies
   f to the results and the first element ad so on.."
  [f]
  (fn [results input]
    (conj results (f input))))


(reduce (map-fn inc) [] (range 10))


;; Filter function
(defn filter-fn
  "Returns a fliter function that uses
   the specified predicate expecting an accumlator
   and an input exlement x"
   [predicate]
   (fn [acc x]
     (if (predicate x)
       (conj acc x)
        acc)))

(reduce (filter-fn even?) [] [1 2 3 4 5 6 7 8 9 10])


;; combining map and filter  functions
;; NOTE the intemediate vectors required!!!
;; Transducers don't require intemediate vectors.
(reduce
 (filter-fn even?)
 []
 (reduce
  (map-fn inc)
  []
  (range 10)))


;; Reducing functions have the type
;;
;; result, input -> result
;;
;; The take a reult and input and return a result,
;; Example (conj [1 2 3] 5)
;; ; => [1 2 3 5]
;; 
;; NOTE: both map-fn and filter-fn use conj
;; We can parametrise this and require the calling
;; function to pass the reducing function
(defn map-fn2
  [f]
  (fn [reducer]
    (fn [result input]
      (reducer result (f input)))))


(defn filter-fn2
  [predicate]
  (fn [reducer]
    (fn [result input]
      (if (predicate input)
        (reducer result input)
        result))))



(reduce
 ((filter-fn2 even?) conj) 
  []
  (reduce
   ((map-fn2 inc) conj)
   []
   [1 2 3 4 5 6 7 8 9 10]))

;;
;; Both functions have signature
;; result, input -> result
;; So they are reducers
;;
(((map-fn2 inc) conj) [1 2 3] 4)

(((filter-fn2 even?) conj) [1 2] 10)


;; Can be used with reduce
(reduce ((map-fn2 inc) ((filter-fn2 even?) conj)) [] (range 10))

;; 
;; Cleaned up to an xform
(def xform
  (comp
   (map-fn2 inc)
   (filter-fn2 even?)))


(reduce (xform conj) [] (range 10))

(defn square [x] (* x x))

(def xform2
  (comp
   (filter-fn2 even?)
   (filter-fn2 #(< % 14))
   (map-fn2 #(+ (square %) 1))
   (map-fn2 inc)))


(defn reducing-fn
  [acc x]
  (conj acc
        (+ (* 3 (* x x)) 1)))

(reduce (xform2 reducing-fn)
        []
        (range 10))


;; ransducers in core-async

(def xchan (chan 1 xform2))

(take! xchan println)

(put! xchan 3)

(put! xchan 4)




